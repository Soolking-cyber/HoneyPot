/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HoneyPotPotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "KEEPER_ROLE"
      | "TREASURER_ROLE"
      | "bearSelected"
      | "bearTokenId"
      | "bearWallet"
      | "beeCollection"
      | "beeState"
      | "configureSeason"
      | "creatorWallet"
      | "dailyDepositAmount"
      | "deposit"
      | "depositWindow"
      | "forceEliminate"
      | "getCurrentDeadline"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialPotProcessed"
      | "lineaToken"
      | "musd"
      | "musdLineaPool"
      | "renounceRole"
      | "revokeRole"
      | "seasonDays"
      | "seasonIdentifier"
      | "seasonStart"
      | "seedInitialPot"
      | "selectBear"
      | "setSwapAdapter"
      | "setSwapPool"
      | "supportsInterface"
      | "survivors"
      | "swapAdapter"
      | "totalBeeSupply"
      | "totalDepositedMusd"
      | "totalLineaRecorded"
      | "updateBearWallet"
      | "updateCreatorWallet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BearSelected"
      | "BearWalletUpdated"
      | "BeeEliminated"
      | "CreatorWalletUpdated"
      | "DepositRecorded"
      | "InitialPotProcessed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SwapAdapterUpdated"
      | "SwapPoolUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bearSelected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bearTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bearWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureSeason",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceEliminate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialPotProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lineaToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "musd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "musdLineaPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seasonDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seasonIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seasonStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seedInitialPot",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectBear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAdapter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "survivors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBeeSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedMusd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLineaRecorded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBearWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorWallet",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bearSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bearTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bearWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beeState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureSeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceEliminate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialPotProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lineaToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "musd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "musdLineaPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seasonDays", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seasonIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seasonStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedInitialPot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selectBear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "survivors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBeeSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedMusd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLineaRecorded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBearWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorWallet",
    data: BytesLike
  ): Result;
}

export namespace BearSelectedEvent {
  export type InputTuple = [tokenId: BigNumberish, randomWord: BigNumberish];
  export type OutputTuple = [tokenId: bigint, randomWord: bigint];
  export interface OutputObject {
    tokenId: bigint;
    randomWord: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BearWalletUpdatedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeeEliminatedEvent {
  export type InputTuple = [tokenId: BigNumberish, executor: AddressLike];
  export type OutputTuple = [tokenId: bigint, executor: string];
  export interface OutputObject {
    tokenId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatorWalletUpdatedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositRecordedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    beeOwner: AddressLike,
    dayNumber: BigNumberish,
    amountMusd: BigNumberish,
    amountLinea: BigNumberish,
    nextDeadline: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    beeOwner: string,
    dayNumber: bigint,
    amountMusd: bigint,
    amountLinea: bigint,
    nextDeadline: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    beeOwner: string;
    dayNumber: bigint;
    amountMusd: bigint;
    amountLinea: bigint;
    nextDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitialPotProcessedEvent {
  export type InputTuple = [
    amountIn: BigNumberish,
    bearPayout: BigNumberish,
    creatorPayout: BigNumberish,
    lineaReceived: BigNumberish
  ];
  export type OutputTuple = [
    amountIn: bigint,
    bearPayout: bigint,
    creatorPayout: bigint,
    lineaReceived: bigint
  ];
  export interface OutputObject {
    amountIn: bigint;
    bearPayout: bigint;
    creatorPayout: bigint;
    lineaReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAdapterUpdatedEvent {
  export type InputTuple = [adapter: AddressLike];
  export type OutputTuple = [adapter: string];
  export interface OutputObject {
    adapter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapPoolUpdatedEvent {
  export type InputTuple = [pool: AddressLike];
  export type OutputTuple = [pool: string];
  export interface OutputObject {
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HoneyPotPot extends BaseContract {
  connect(runner?: ContractRunner | null): HoneyPotPot;
  waitForDeployment(): Promise<this>;

  interface: HoneyPotPotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  KEEPER_ROLE: TypedContractMethod<[], [string], "view">;

  TREASURER_ROLE: TypedContractMethod<[], [string], "view">;

  bearSelected: TypedContractMethod<[], [boolean], "view">;

  bearTokenId: TypedContractMethod<[], [bigint], "view">;

  bearWallet: TypedContractMethod<[], [string], "view">;

  beeCollection: TypedContractMethod<[], [string], "view">;

  beeState: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean, boolean] & {
        lastDepositAt: bigint;
        daysPaid: bigint;
        eliminated: boolean;
        rewardClaimed: boolean;
      }
    ],
    "view"
  >;

  configureSeason: TypedContractMethod<
    [
      seasonDays_: BigNumberish,
      depositWindow_: BigNumberish,
      dailyDepositAmount_: BigNumberish,
      totalBeeSupply_: BigNumberish,
      newSeasonStart: BigNumberish,
      newSeasonIdentifier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  creatorWallet: TypedContractMethod<[], [string], "view">;

  dailyDepositAmount: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [tokenId: BigNumberish, swapCalldata: BytesLike],
    [void],
    "nonpayable"
  >;

  depositWindow: TypedContractMethod<[], [bigint], "view">;

  forceEliminate: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentDeadline: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialPotProcessed: TypedContractMethod<[], [boolean], "view">;

  lineaToken: TypedContractMethod<[], [string], "view">;

  musd: TypedContractMethod<[], [string], "view">;

  musdLineaPool: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  seasonDays: TypedContractMethod<[], [bigint], "view">;

  seasonIdentifier: TypedContractMethod<[], [bigint], "view">;

  seasonStart: TypedContractMethod<[], [bigint], "view">;

  seedInitialPot: TypedContractMethod<
    [amountIn: BigNumberish, randomWord: BigNumberish, swapCalldata: BytesLike],
    [bigint],
    "nonpayable"
  >;

  selectBear: TypedContractMethod<
    [randomWord: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapAdapter: TypedContractMethod<
    [adapter: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapPool: TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  survivors: TypedContractMethod<[], [bigint], "view">;

  swapAdapter: TypedContractMethod<[], [string], "view">;

  totalBeeSupply: TypedContractMethod<[], [bigint], "view">;

  totalDepositedMusd: TypedContractMethod<[], [bigint], "view">;

  totalLineaRecorded: TypedContractMethod<[], [bigint], "view">;

  updateBearWallet: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCreatorWallet: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KEEPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bearSelected"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "bearTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bearWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beeCollection"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beeState"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean, boolean] & {
        lastDepositAt: bigint;
        daysPaid: bigint;
        eliminated: boolean;
        rewardClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "configureSeason"
  ): TypedContractMethod<
    [
      seasonDays_: BigNumberish,
      depositWindow_: BigNumberish,
      dailyDepositAmount_: BigNumberish,
      totalBeeSupply_: BigNumberish,
      newSeasonStart: BigNumberish,
      newSeasonIdentifier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dailyDepositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [tokenId: BigNumberish, swapCalldata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceEliminate"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentDeadline"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialPotProcessed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lineaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "musd"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "musdLineaPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seasonDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seasonIdentifier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seasonStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seedInitialPot"
  ): TypedContractMethod<
    [amountIn: BigNumberish, randomWord: BigNumberish, swapCalldata: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectBear"
  ): TypedContractMethod<[randomWord: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapAdapter"
  ): TypedContractMethod<[adapter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapPool"
  ): TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "survivors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapAdapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBeeSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDepositedMusd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLineaRecorded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateBearWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCreatorWallet"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BearSelected"
  ): TypedContractEvent<
    BearSelectedEvent.InputTuple,
    BearSelectedEvent.OutputTuple,
    BearSelectedEvent.OutputObject
  >;
  getEvent(
    key: "BearWalletUpdated"
  ): TypedContractEvent<
    BearWalletUpdatedEvent.InputTuple,
    BearWalletUpdatedEvent.OutputTuple,
    BearWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BeeEliminated"
  ): TypedContractEvent<
    BeeEliminatedEvent.InputTuple,
    BeeEliminatedEvent.OutputTuple,
    BeeEliminatedEvent.OutputObject
  >;
  getEvent(
    key: "CreatorWalletUpdated"
  ): TypedContractEvent<
    CreatorWalletUpdatedEvent.InputTuple,
    CreatorWalletUpdatedEvent.OutputTuple,
    CreatorWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DepositRecorded"
  ): TypedContractEvent<
    DepositRecordedEvent.InputTuple,
    DepositRecordedEvent.OutputTuple,
    DepositRecordedEvent.OutputObject
  >;
  getEvent(
    key: "InitialPotProcessed"
  ): TypedContractEvent<
    InitialPotProcessedEvent.InputTuple,
    InitialPotProcessedEvent.OutputTuple,
    InitialPotProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SwapAdapterUpdated"
  ): TypedContractEvent<
    SwapAdapterUpdatedEvent.InputTuple,
    SwapAdapterUpdatedEvent.OutputTuple,
    SwapAdapterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapPoolUpdated"
  ): TypedContractEvent<
    SwapPoolUpdatedEvent.InputTuple,
    SwapPoolUpdatedEvent.OutputTuple,
    SwapPoolUpdatedEvent.OutputObject
  >;

  filters: {
    "BearSelected(uint256,uint256)": TypedContractEvent<
      BearSelectedEvent.InputTuple,
      BearSelectedEvent.OutputTuple,
      BearSelectedEvent.OutputObject
    >;
    BearSelected: TypedContractEvent<
      BearSelectedEvent.InputTuple,
      BearSelectedEvent.OutputTuple,
      BearSelectedEvent.OutputObject
    >;

    "BearWalletUpdated(address)": TypedContractEvent<
      BearWalletUpdatedEvent.InputTuple,
      BearWalletUpdatedEvent.OutputTuple,
      BearWalletUpdatedEvent.OutputObject
    >;
    BearWalletUpdated: TypedContractEvent<
      BearWalletUpdatedEvent.InputTuple,
      BearWalletUpdatedEvent.OutputTuple,
      BearWalletUpdatedEvent.OutputObject
    >;

    "BeeEliminated(uint256,address)": TypedContractEvent<
      BeeEliminatedEvent.InputTuple,
      BeeEliminatedEvent.OutputTuple,
      BeeEliminatedEvent.OutputObject
    >;
    BeeEliminated: TypedContractEvent<
      BeeEliminatedEvent.InputTuple,
      BeeEliminatedEvent.OutputTuple,
      BeeEliminatedEvent.OutputObject
    >;

    "CreatorWalletUpdated(address)": TypedContractEvent<
      CreatorWalletUpdatedEvent.InputTuple,
      CreatorWalletUpdatedEvent.OutputTuple,
      CreatorWalletUpdatedEvent.OutputObject
    >;
    CreatorWalletUpdated: TypedContractEvent<
      CreatorWalletUpdatedEvent.InputTuple,
      CreatorWalletUpdatedEvent.OutputTuple,
      CreatorWalletUpdatedEvent.OutputObject
    >;

    "DepositRecorded(uint256,address,uint16,uint256,uint256,uint256)": TypedContractEvent<
      DepositRecordedEvent.InputTuple,
      DepositRecordedEvent.OutputTuple,
      DepositRecordedEvent.OutputObject
    >;
    DepositRecorded: TypedContractEvent<
      DepositRecordedEvent.InputTuple,
      DepositRecordedEvent.OutputTuple,
      DepositRecordedEvent.OutputObject
    >;

    "InitialPotProcessed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      InitialPotProcessedEvent.InputTuple,
      InitialPotProcessedEvent.OutputTuple,
      InitialPotProcessedEvent.OutputObject
    >;
    InitialPotProcessed: TypedContractEvent<
      InitialPotProcessedEvent.InputTuple,
      InitialPotProcessedEvent.OutputTuple,
      InitialPotProcessedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SwapAdapterUpdated(address)": TypedContractEvent<
      SwapAdapterUpdatedEvent.InputTuple,
      SwapAdapterUpdatedEvent.OutputTuple,
      SwapAdapterUpdatedEvent.OutputObject
    >;
    SwapAdapterUpdated: TypedContractEvent<
      SwapAdapterUpdatedEvent.InputTuple,
      SwapAdapterUpdatedEvent.OutputTuple,
      SwapAdapterUpdatedEvent.OutputObject
    >;

    "SwapPoolUpdated(address)": TypedContractEvent<
      SwapPoolUpdatedEvent.InputTuple,
      SwapPoolUpdatedEvent.OutputTuple,
      SwapPoolUpdatedEvent.OutputObject
    >;
    SwapPoolUpdated: TypedContractEvent<
      SwapPoolUpdatedEvent.InputTuple,
      SwapPoolUpdatedEvent.OutputTuple,
      SwapPoolUpdatedEvent.OutputObject
    >;
  };
}
