/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TreasurySplitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BEAR_BPS"
      | "CREATOR_BPS"
      | "DEFAULT_ADMIN_ROLE"
      | "POT_BPS"
      | "bearNativeBalance"
      | "bearState"
      | "bearTokenBalances"
      | "bearTokenId"
      | "bearWinner"
      | "beeCollection"
      | "callbackGasLimit"
      | "coordinator"
      | "creator"
      | "distributeBearRewards"
      | "getRoleAdmin"
      | "getTrackedBearTokens"
      | "grantRole"
      | "hasRole"
      | "keyHash"
      | "pot"
      | "rawFulfillRandomWords"
      | "renounceRole"
      | "requestBearSelection"
      | "requestConfirmations"
      | "revokeRole"
      | "splitNative"
      | "splitToken"
      | "subscriptionId"
      | "supportsInterface"
      | "updateVRFConfig"
      | "updateVRFSubscription"
      | "vrfRequestId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BearNativePayout"
      | "BearSelected"
      | "BearSelectionRequested"
      | "BearTokenPayout"
      | "NativeSplit"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenSplit"
      | "VRFConfigUpdated"
      | "VRFSubscriptionUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BEAR_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CREATOR_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POT_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bearNativeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bearState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bearTokenBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bearTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bearWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeBearRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrackedBearTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestBearSelection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "splitToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVRFConfig",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVRFSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequestId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BEAR_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATOR_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POT_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bearNativeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bearState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bearTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bearTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bearWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeBearRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrackedBearTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBearSelection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVRFConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVRFSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequestId",
    data: BytesLike
  ): Result;
}

export namespace BearNativePayoutEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BearSelectedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    winner: AddressLike,
    randomWord: BigNumberish,
    requestId: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    winner: string,
    randomWord: bigint,
    requestId: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    winner: string;
    randomWord: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BearSelectionRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    mintedSupply: BigNumberish
  ];
  export type OutputTuple = [requestId: bigint, mintedSupply: bigint];
  export interface OutputObject {
    requestId: bigint;
    mintedSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BearTokenPayoutEvent {
  export type InputTuple = [
    winner: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [winner: string, token: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeSplitEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSplitEvent {
  export type InputTuple = [token: AddressLike, value: BigNumberish];
  export type OutputTuple = [token: string, value: bigint];
  export interface OutputObject {
    token: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VRFConfigUpdatedEvent {
  export type InputTuple = [
    keyHash: BytesLike,
    requestConfirmations: BigNumberish,
    callbackGasLimit: BigNumberish
  ];
  export type OutputTuple = [
    keyHash: string,
    requestConfirmations: bigint,
    callbackGasLimit: bigint
  ];
  export interface OutputObject {
    keyHash: string;
    requestConfirmations: bigint;
    callbackGasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VRFSubscriptionUpdatedEvent {
  export type InputTuple = [subscriptionId: BigNumberish];
  export type OutputTuple = [subscriptionId: bigint];
  export interface OutputObject {
    subscriptionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TreasurySplitter extends BaseContract {
  connect(runner?: ContractRunner | null): TreasurySplitter;
  waitForDeployment(): Promise<this>;

  interface: TreasurySplitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BEAR_BPS: TypedContractMethod<[], [bigint], "view">;

  CREATOR_BPS: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  POT_BPS: TypedContractMethod<[], [bigint], "view">;

  bearNativeBalance: TypedContractMethod<[], [bigint], "view">;

  bearState: TypedContractMethod<[], [bigint], "view">;

  bearTokenBalances: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  bearTokenId: TypedContractMethod<[], [bigint], "view">;

  bearWinner: TypedContractMethod<[], [string], "view">;

  beeCollection: TypedContractMethod<[], [string], "view">;

  callbackGasLimit: TypedContractMethod<[], [bigint], "view">;

  coordinator: TypedContractMethod<[], [string], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  distributeBearRewards: TypedContractMethod<[], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTrackedBearTokens: TypedContractMethod<[], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  keyHash: TypedContractMethod<[], [string], "view">;

  pot: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestBearSelection: TypedContractMethod<[], [bigint], "nonpayable">;

  requestConfirmations: TypedContractMethod<[], [bigint], "view">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  splitNative: TypedContractMethod<[], [void], "payable">;

  splitToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateVRFConfig: TypedContractMethod<
    [
      keyHash_: BytesLike,
      requestConfirmations_: BigNumberish,
      callbackGasLimit_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateVRFSubscription: TypedContractMethod<
    [subscriptionId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  vrfRequestId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BEAR_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CREATOR_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POT_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bearNativeBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bearState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bearTokenBalances"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bearTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bearWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beeCollection"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callbackGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "coordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributeBearRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTrackedBearTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "keyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestBearSelection"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "requestConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "splitNative"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "splitToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateVRFConfig"
  ): TypedContractMethod<
    [
      keyHash_: BytesLike,
      requestConfirmations_: BigNumberish,
      callbackGasLimit_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVRFSubscription"
  ): TypedContractMethod<[subscriptionId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vrfRequestId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BearNativePayout"
  ): TypedContractEvent<
    BearNativePayoutEvent.InputTuple,
    BearNativePayoutEvent.OutputTuple,
    BearNativePayoutEvent.OutputObject
  >;
  getEvent(
    key: "BearSelected"
  ): TypedContractEvent<
    BearSelectedEvent.InputTuple,
    BearSelectedEvent.OutputTuple,
    BearSelectedEvent.OutputObject
  >;
  getEvent(
    key: "BearSelectionRequested"
  ): TypedContractEvent<
    BearSelectionRequestedEvent.InputTuple,
    BearSelectionRequestedEvent.OutputTuple,
    BearSelectionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "BearTokenPayout"
  ): TypedContractEvent<
    BearTokenPayoutEvent.InputTuple,
    BearTokenPayoutEvent.OutputTuple,
    BearTokenPayoutEvent.OutputObject
  >;
  getEvent(
    key: "NativeSplit"
  ): TypedContractEvent<
    NativeSplitEvent.InputTuple,
    NativeSplitEvent.OutputTuple,
    NativeSplitEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSplit"
  ): TypedContractEvent<
    TokenSplitEvent.InputTuple,
    TokenSplitEvent.OutputTuple,
    TokenSplitEvent.OutputObject
  >;
  getEvent(
    key: "VRFConfigUpdated"
  ): TypedContractEvent<
    VRFConfigUpdatedEvent.InputTuple,
    VRFConfigUpdatedEvent.OutputTuple,
    VRFConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VRFSubscriptionUpdated"
  ): TypedContractEvent<
    VRFSubscriptionUpdatedEvent.InputTuple,
    VRFSubscriptionUpdatedEvent.OutputTuple,
    VRFSubscriptionUpdatedEvent.OutputObject
  >;

  filters: {
    "BearNativePayout(address,uint256)": TypedContractEvent<
      BearNativePayoutEvent.InputTuple,
      BearNativePayoutEvent.OutputTuple,
      BearNativePayoutEvent.OutputObject
    >;
    BearNativePayout: TypedContractEvent<
      BearNativePayoutEvent.InputTuple,
      BearNativePayoutEvent.OutputTuple,
      BearNativePayoutEvent.OutputObject
    >;

    "BearSelected(uint256,address,uint256,uint256)": TypedContractEvent<
      BearSelectedEvent.InputTuple,
      BearSelectedEvent.OutputTuple,
      BearSelectedEvent.OutputObject
    >;
    BearSelected: TypedContractEvent<
      BearSelectedEvent.InputTuple,
      BearSelectedEvent.OutputTuple,
      BearSelectedEvent.OutputObject
    >;

    "BearSelectionRequested(uint256,uint256)": TypedContractEvent<
      BearSelectionRequestedEvent.InputTuple,
      BearSelectionRequestedEvent.OutputTuple,
      BearSelectionRequestedEvent.OutputObject
    >;
    BearSelectionRequested: TypedContractEvent<
      BearSelectionRequestedEvent.InputTuple,
      BearSelectionRequestedEvent.OutputTuple,
      BearSelectionRequestedEvent.OutputObject
    >;

    "BearTokenPayout(address,address,uint256)": TypedContractEvent<
      BearTokenPayoutEvent.InputTuple,
      BearTokenPayoutEvent.OutputTuple,
      BearTokenPayoutEvent.OutputObject
    >;
    BearTokenPayout: TypedContractEvent<
      BearTokenPayoutEvent.InputTuple,
      BearTokenPayoutEvent.OutputTuple,
      BearTokenPayoutEvent.OutputObject
    >;

    "NativeSplit(uint256)": TypedContractEvent<
      NativeSplitEvent.InputTuple,
      NativeSplitEvent.OutputTuple,
      NativeSplitEvent.OutputObject
    >;
    NativeSplit: TypedContractEvent<
      NativeSplitEvent.InputTuple,
      NativeSplitEvent.OutputTuple,
      NativeSplitEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenSplit(address,uint256)": TypedContractEvent<
      TokenSplitEvent.InputTuple,
      TokenSplitEvent.OutputTuple,
      TokenSplitEvent.OutputObject
    >;
    TokenSplit: TypedContractEvent<
      TokenSplitEvent.InputTuple,
      TokenSplitEvent.OutputTuple,
      TokenSplitEvent.OutputObject
    >;

    "VRFConfigUpdated(bytes32,uint16,uint32)": TypedContractEvent<
      VRFConfigUpdatedEvent.InputTuple,
      VRFConfigUpdatedEvent.OutputTuple,
      VRFConfigUpdatedEvent.OutputObject
    >;
    VRFConfigUpdated: TypedContractEvent<
      VRFConfigUpdatedEvent.InputTuple,
      VRFConfigUpdatedEvent.OutputTuple,
      VRFConfigUpdatedEvent.OutputObject
    >;

    "VRFSubscriptionUpdated(uint64)": TypedContractEvent<
      VRFSubscriptionUpdatedEvent.InputTuple,
      VRFSubscriptionUpdatedEvent.OutputTuple,
      VRFSubscriptionUpdatedEvent.OutputObject
    >;
    VRFSubscriptionUpdated: TypedContractEvent<
      VRFSubscriptionUpdatedEvent.InputTuple,
      VRFSubscriptionUpdatedEvent.OutputTuple,
      VRFSubscriptionUpdatedEvent.OutputObject
    >;
  };
}
