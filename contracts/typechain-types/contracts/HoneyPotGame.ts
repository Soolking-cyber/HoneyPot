/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HoneyPotGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DEPOSIT_WINDOW"
      | "KEEPER_ROLE"
      | "TOTAL_DAYS"
      | "beeNft"
      | "claimReward"
      | "closeSeason"
      | "dailyAmount"
      | "deposit"
      | "forceEliminate"
      | "getCurrentDeadline"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "progressByBee"
      | "registerEarlyDeposit"
      | "renounceRole"
      | "revokeRole"
      | "seasonClosed"
      | "seasonStart"
      | "stakeToken"
      | "supportsInterface"
      | "survivors"
      | "totalDeposited"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BeeEliminated"
      | "DepositRecorded"
      | "RewardClaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SeasonClosed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "beeNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeSeason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceEliminate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "progressByBee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEarlyDeposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seasonClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seasonStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "survivors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOTAL_DAYS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beeNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceEliminate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "progressByBee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEarlyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seasonClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seasonStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "survivors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
}

export namespace BeeEliminatedEvent {
  export type InputTuple = [beeId: BigNumberish, lastDepositAt: BigNumberish];
  export type OutputTuple = [beeId: bigint, lastDepositAt: bigint];
  export interface OutputObject {
    beeId: bigint;
    lastDepositAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositRecordedEvent {
  export type InputTuple = [
    bee: AddressLike,
    beeId: BigNumberish,
    dayNumber: BigNumberish,
    depositedAmount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    bee: string,
    beeId: bigint,
    dayNumber: bigint,
    depositedAmount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    bee: string;
    beeId: bigint;
    dayNumber: bigint;
    depositedAmount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    bee: AddressLike,
    beeId: BigNumberish,
    payout: BigNumberish
  ];
  export type OutputTuple = [bee: string, beeId: bigint, payout: bigint];
  export interface OutputObject {
    bee: string;
    beeId: bigint;
    payout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeasonClosedEvent {
  export type InputTuple = [timestamp: BigNumberish, survivors: BigNumberish];
  export type OutputTuple = [timestamp: bigint, survivors: bigint];
  export interface OutputObject {
    timestamp: bigint;
    survivors: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HoneyPotGame extends BaseContract {
  connect(runner?: ContractRunner | null): HoneyPotGame;
  waitForDeployment(): Promise<this>;

  interface: HoneyPotGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEPOSIT_WINDOW: TypedContractMethod<[], [bigint], "view">;

  KEEPER_ROLE: TypedContractMethod<[], [string], "view">;

  TOTAL_DAYS: TypedContractMethod<[], [bigint], "view">;

  beeNft: TypedContractMethod<[], [string], "view">;

  claimReward: TypedContractMethod<
    [beeId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  closeSeason: TypedContractMethod<[], [void], "nonpayable">;

  dailyAmount: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[beeId: BigNumberish], [void], "nonpayable">;

  forceEliminate: TypedContractMethod<
    [beeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentDeadline: TypedContractMethod<
    [beeId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  progressByBee: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean, boolean] & {
        lastDepositAt: bigint;
        daysCompleted: bigint;
        eliminated: boolean;
        rewardClaimed: boolean;
      }
    ],
    "view"
  >;

  registerEarlyDeposit: TypedContractMethod<
    [beeId: BigNumberish, timestamp: BigNumberish, dayCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  seasonClosed: TypedContractMethod<[], [boolean], "view">;

  seasonStart: TypedContractMethod<[], [bigint], "view">;

  stakeToken: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  survivors: TypedContractMethod<[], [bigint], "view">;

  totalDeposited: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEPOSIT_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "KEEPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOTAL_DAYS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeNft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [beeId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeSeason"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dailyAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[beeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceEliminate"
  ): TypedContractMethod<[beeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentDeadline"
  ): TypedContractMethod<[beeId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "progressByBee"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean, boolean] & {
        lastDepositAt: bigint;
        daysCompleted: bigint;
        eliminated: boolean;
        rewardClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerEarlyDeposit"
  ): TypedContractMethod<
    [beeId: BigNumberish, timestamp: BigNumberish, dayCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seasonClosed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "seasonStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "survivors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BeeEliminated"
  ): TypedContractEvent<
    BeeEliminatedEvent.InputTuple,
    BeeEliminatedEvent.OutputTuple,
    BeeEliminatedEvent.OutputObject
  >;
  getEvent(
    key: "DepositRecorded"
  ): TypedContractEvent<
    DepositRecordedEvent.InputTuple,
    DepositRecordedEvent.OutputTuple,
    DepositRecordedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SeasonClosed"
  ): TypedContractEvent<
    SeasonClosedEvent.InputTuple,
    SeasonClosedEvent.OutputTuple,
    SeasonClosedEvent.OutputObject
  >;

  filters: {
    "BeeEliminated(uint256,uint40)": TypedContractEvent<
      BeeEliminatedEvent.InputTuple,
      BeeEliminatedEvent.OutputTuple,
      BeeEliminatedEvent.OutputObject
    >;
    BeeEliminated: TypedContractEvent<
      BeeEliminatedEvent.InputTuple,
      BeeEliminatedEvent.OutputTuple,
      BeeEliminatedEvent.OutputObject
    >;

    "DepositRecorded(address,uint256,uint16,uint256,uint256)": TypedContractEvent<
      DepositRecordedEvent.InputTuple,
      DepositRecordedEvent.OutputTuple,
      DepositRecordedEvent.OutputObject
    >;
    DepositRecorded: TypedContractEvent<
      DepositRecordedEvent.InputTuple,
      DepositRecordedEvent.OutputTuple,
      DepositRecordedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SeasonClosed(uint256,uint256)": TypedContractEvent<
      SeasonClosedEvent.InputTuple,
      SeasonClosedEvent.OutputTuple,
      SeasonClosedEvent.OutputObject
    >;
    SeasonClosed: TypedContractEvent<
      SeasonClosedEvent.InputTuple,
      SeasonClosedEvent.OutputTuple,
      SeasonClosedEvent.OutputObject
    >;
  };
}
